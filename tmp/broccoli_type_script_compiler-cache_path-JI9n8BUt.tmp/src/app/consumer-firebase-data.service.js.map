{"version":3,"file":"consumer-firebase-data.service.js","sourceRoot":"","sources":["../Users/soichit/Documents/feedback-test/tmp/broccoli_type_script_compiler-input_base_path-rqWYIsSw.tmp/0/src/app/consumer-firebase-data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n// dependency for the Signal class which holds structure for signals in our firebase db\n//import { Signal } from './consumer/signal-view/signal';\nimport { AngularFire, FirebaseListObservable, FirebaseObjectObservable } from 'angularfire2';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class ConsumerFirebaseDataService {\n  signalFeed: FirebaseListObservable<string[]>;\n  reviews: FirebaseListObservable<string[]>;\n  tableList: any[];\n  restaurant_id: string;\n  restaurant_name: string;\n  table: number; \n  user: string;\n  menuItems: FirebaseListObservable<any[]>;\n  menus: FirebaseListObservable<any[]>;\n  menuStructure: Observable<any>;\n\n  constructor(public af: AngularFire) {\n    this.restaurant_id = '-KMNBxENcTCY_MjVzLef';\n    this.restaurant_name = \"Cedar's\";\n    this.signalFeed = af.database.list('restaurants/' + this.restaurant_id + '/feed')\n    this.reviews = af.database.list('restaurants/'+ this.restaurant_id +'/reviews')\n    this.table = 0;\n    let tempTables = af.database.list('restaurants/' + this.restaurant_id + '/tables')\n    tempTables.subscribe((items) => {\n      this.tableList = items;\n    });\n    this.menuItems = af.database.list('restaurants/' + this.restaurant_id + '/menu_items');\n    this.menus = af.database.list('restaurants/' + this.restaurant_id + '/menu_structure/menus');\n    this.menuStructure = af.database.object('restaurants/' + this.restaurant_id + '/menu_structure', { preserveSnapshot: true });\n  }\n  setTable(i: number) {\n    this.table = i;\n  }\n  getTable() {\n    return this.table;\n  }\n  setUser(i: string) {\n    this.user = i;\n  }\n  getUser() {\n    return this.user;\n  }\n  getAssignedServer(table_key: string) {\n    function check(x) {\n      if (x == null) {\n        return false;\n      }\n      if (x === null) {\n        return false;\n      }\n      if (typeof x === 'undefined') {\n        return false;\n      }\n      return true;\n    }\n    var key: string;\n    key = null;\n    const queryObservable = this.af.database.list('restaurants/'+ this.restaurant_id +'/active_servers', {\n      query: {\n        orderByChild: 'assigned_tables'\n      }\n    });\n    // subscribe to changes\n    var tables: any;\n    queryObservable.subscribe(queriedItems => {\n      tables = queriedItems;\n      for (let t of tables) {\n        if(check(t['assigned_tables'])) {\n          if(t['assigned_tables'].hasOwnProperty(table_key) > -1) {\n            key = t['server_id'];\n            return key;\n          }\n        }\n      } \n    });\n    return key;\n  }\n  getReviews() {\n    return this.reviews;\n  }\n  /*\n  newSignal(type: string, user: string, table_num: number) {\n    \n    var signal = new Signal();\n    signal.type = type;\n    for (let table of this.tableList) {\n      if(table.number == table_num) {\n        signal.table_id = table.$key;\n        signal.table_num = table.number;\n      }\n    }\n    signal.server_id = this.getAssignedServer(signal.table_id);\n    signal.user = this.user;\n    if (signal.server_id === null) {\n      console.log(\"this server is not active or the table is not assigned\");\n      this.signalFeed.push(signal);\n    } else {\n      this.signalFeed.push(signal);\n    }\n  }\n  */\n  getMenus() {\n    return this.menus;\n    // this.menuStructure.subscribe(snap => {\n    //   console.log(Object.keys(snap.val()['menus']));\n    //   return Object.keys(snap.val()['menus']);\n    // });\n  }\n  // getSections(menuKey: string) {\n  //   return this.af.database.list('restaurants/' + this.restaurant_id + '/menu_structure/menus/' + menuKey);\n  //   // this.menuStructure.subscribe(snap => {\n  //   //   console.log(Object.keys(snap['menus'][menuKey]));\n  //   //   return Object.keys(snap['menus'][menuKey]);\n  //   // });\n  // }\n  getSectionItems(menuKey: string, sectionKey: string) {\n    // let items = this.af.database.object(\n    //   'restaurants/' + this.restaurant_id + '/menu_structure/menus/' + menuKey + '/' + sectionKey + '/items',\n    //   { preserveSnapshot: true });\n    // items.subscribe(snapshot => {\n    //   return snapshot.val();\n    // });\n\n    return this.af.database.list('restaurants/' + this.restaurant_id + '/menu_items', {\n      query: {\n        orderByChild: 'section',\n        equalTo: sectionKey\n      }\n    });\n\n    // this.menuStructure.subscribe(snap => {\n    //   return snap['menus'][menuKey];\n    // });\n  }\n  getSelectedItem(menuKey: string, sectionKey: string, itemKey: string) {\n    return this.af.database.object('restaurants/' + this.restaurant_id + '/menu_items/' + itemKey);\n  }\n  getItemNutrition(menuKey: string, sectionKey: string, itemKey: string) {\n    return this.af.database.list('restaurants/' + this.restaurant_id + '/menu_items/' + itemKey + '/nutrition_info');\n  }\n  sectionContains(menuKey: string, sectionKey: string, itemKey: string) {\n    let items = this.af.database.object(\n      'restaurants/' + this.restaurant_id + '/menu_structure/menus/' + menuKey + '/' + sectionKey + '/items',\n      { preserveSnapshot: true });\n    items.subscribe(snapshot => {\n      console.log(snapshot.val().indexOf(itemKey) > -1);\n      return snapshot.val().indexOf(itemKey) > -1;\n    });\n  }\n  getMenuItems() {\n    return this.menuItems;\n  }\n  getSections() {\n    return this.af.database.list('restaurants/' + this.restaurant_id + '/menu_sections');\n  }\n}\n"]}